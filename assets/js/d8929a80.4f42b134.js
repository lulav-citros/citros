"use strict";(self.webpackChunkcitros_doc=self.webpackChunkcitros_doc||[]).push([[17461],{3905:(t,a,e)=>{e.d(a,{Zo:()=>m,kt:()=>N});var n=e(67294);function r(t,a,e){return a in t?Object.defineProperty(t,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[a]=e,t}function l(t,a){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),e.push.apply(e,n)}return e}function i(t){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?l(Object(e),!0).forEach((function(a){r(t,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(e,a))}))}return t}function s(t,a){if(null==t)return{};var e,n,r=function(t,a){if(null==t)return{};var e,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||(r[e]=t[e]);return r}(t,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var p=n.createContext({}),d=function(t){var a=n.useContext(p),e=a;return t&&(e="function"==typeof t?t(a):i(i({},a),t)),e},m=function(t){var a=d(t.components);return n.createElement(p.Provider,{value:a},t.children)},o="mdxType",k={inlineCode:"code",wrapper:function(t){var a=t.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(t,a){var e=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),o=d(e),u=r,N=o["".concat(p,".").concat(u)]||o[u]||k[u]||l;return e?n.createElement(N,i(i({ref:a},m),{},{components:e})):n.createElement(N,i({ref:a},m))}));function N(t,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof t||r){var l=e.length,i=new Array(l);i[0]=u;var s={};for(var p in a)hasOwnProperty.call(a,p)&&(s[p]=a[p]);s.originalType=t,s[o]="string"==typeof t?t:r,i[1]=s;for(var d=2;d<l;d++)i[d]=e[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,e)}u.displayName="MDXCreateElement"},74137:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=e(87462),r=(e(67294),e(3905));const l={toc_max_heading_level:4,hide_title:!0,sidebar_position:2,sidebar_label:"Bin, Interpolate and Calculate Statistics",description:"Get statistics across different simulations"},i="Bin, Interpolate and Calculate Statistics",s={unversionedId:"data_analysis/error_analysis/statistics",id:"version-0.2.61/data_analysis/error_analysis/statistics",title:"Bin, Interpolate and Calculate Statistics",description:"Get statistics across different simulations",source:"@site/versioned_docs/version-0.2.61/data_analysis/error_analysis/statistics.md",sourceDirName:"data_analysis/error_analysis",slug:"/data_analysis/error_analysis/statistics",permalink:"/docs/0.2.61/data_analysis/error_analysis/statistics",draft:!1,tags:[],version:"0.2.61",sidebarPosition:2,frontMatter:{toc_max_heading_level:4,hide_title:!0,sidebar_position:2,sidebar_label:"Bin, Interpolate and Calculate Statistics",description:"Get statistics across different simulations"},sidebar:"gettingStartedSidebar",previous:{title:"Getting Started: Query Data",permalink:"/docs/0.2.61/data_analysis/error_analysis/getting_started_query_data"},next:{title:"Correlation",permalink:"/docs/0.2.61/data_analysis/error_analysis/correlation"}},p={},d=[{value:"<strong>CitrosData</strong> Object",id:"citrosdata-object",level:2},{value:"Assigning Indexes",id:"assigning-indexes",level:2},{value:"Bin Data",id:"bin-data",level:3},{value:"Scale Data",id:"scale-data",level:3},{value:"Statistics",id:"statistics",level:2},{value:"Get Statistics",id:"get-statistics",level:3},{value:"Plot Statistics",id:"plot-statistics",level:3}],m={toc:d},o="wrapper";function k(t){let{components:a,...l}=t;return(0,r.kt)(o,(0,n.Z)({},m,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bin-interpolate-and-calculate-statistics"},"Bin, Interpolate and Calculate Statistics"),(0,r.kt)("h2",{id:"citrosdata-object"},(0,r.kt)("strong",{parentName:"h2"},"CitrosData")," Object"),(0,r.kt)("p",null,"To perform data analysis the ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData"},(0,r.kt)("strong",{parentName:"a"},"CitrosData"))," object is used.\nSay, we would like to investigate the 'x' vector and its behavior depending on the time. Let's query data from the topic 'A' from the batch 'temperature' created by simulation 'simulation_environment':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('simulation_environment').batch('temperature').topic('A').data(['data.x', 'data.time'])\n>>> print(df)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the output table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"sid"),(0,r.kt)("th",{parentName:"tr",align:null},"rid"),(0,r.kt)("th",{parentName:"tr",align:null},"time"),(0,r.kt)("th",{parentName:"tr",align:null},"topic"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x"),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"105036927"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"{'x_1': -0.08, 'x_2': -0.002, 'x_3': 17.7}"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"312751159"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"{'x_1': 0.0, 'x_2': 0.08, 'x_3': 154.47}"),(0,r.kt)("td",{parentName:"tr",align:null},"10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData"},(0,r.kt)("strong",{parentName:"a"},"CitrosData"))," object has two main attributes - 'data' - the depending variables whose behavior we would like to study, and all other additional columns - 'addData'. It is possible to specify which column(s) to treat as data by ",(0,r.kt)("inlineCode",{parentName:"p"},"data_label"),". You may also specify ",(0,r.kt)("inlineCode",{parentName:"p"},"units")," of the data to make future plots more informative."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosData\n>>> dataset = CitrosData(df, data_label=['data.x'], units = 'm')\n")),(0,r.kt)("p",null,"When ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData"},(0,r.kt)("strong",{parentName:"a"},"CitrosData"))," object is created, it will turn all dicts or lists, if there were any in ",(0,r.kt)("strong",{parentName:"p"},"df")," rows, into separate columns and store them in 'data' attribute as a ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"},(0,r.kt)("strong",{parentName:"a"},"DataFrame")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(dataset.data)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'data' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.080"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.002"),(0,r.kt)("td",{parentName:"tr",align:null},"17.70")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.080"),(0,r.kt)("td",{parentName:"tr",align:null},"154.47")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("p",null,"All other data is stored in 'addData' attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(dataset.addData)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'addData' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"sid"),(0,r.kt)("th",{parentName:"tr",align:null},"rid"),(0,r.kt)("th",{parentName:"tr",align:null},"time"),(0,r.kt)("th",{parentName:"tr",align:null},"topic"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"105036927"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"312751159"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("p",null,"It is possible to turn data of ",(0,r.kt)("strong",{parentName:"p"},"CitrosData")," object back to pandas.DataFrame. Method ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.to_pandas"},(0,r.kt)("strong",{parentName:"a"},"to_pandas()"))," concatenate 'data' and 'addData' attributes and return the result table as a pandas.DataFrame:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> F = dataset.to_pandas()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"The result of the concatenation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"),(0,r.kt)("th",{parentName:"tr",align:null},"sid"),(0,r.kt)("th",{parentName:"tr",align:null},"rid"),(0,r.kt)("th",{parentName:"tr",align:null},"time"),(0,r.kt)("th",{parentName:"tr",align:null},"topic"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.080"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.002"),(0,r.kt)("td",{parentName:"tr",align:null},"17.70"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"105036927"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"0.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.080"),(0,r.kt)("td",{parentName:"tr",align:null},"154.47"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"312751159"),(0,r.kt)("td",{parentName:"tr",align:null},"A"),(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("h2",{id:"assigning-indexes"},"Assigning Indexes"),(0,r.kt)("p",null,"To analyze data of multiple simulations it is necessary to establish a correspondence between the values of the data from these different simulations. One approach is to select an independent variable, define a scale that is common to all simulations and assign indexes on this scale. Then, the values of variables from different simulations will be connected by this independent variable."),(0,r.kt)("p",null,"There are two ways to perform index assignment. The first one is to divide the independent variable into N ranges, assign an index to each interval, and calculate the averages of the data values for each simulation in each range. The second approach is to scale the independent variable to the interval ","[0,1]",", define a new range of N points uniformly distributed from 0 to 1, and interpolate data points over this new interval. The first approach corresponds to the ",(0,r.kt)("a",{parentName:"p",href:"#bin-data"},(0,r.kt)("strong",{parentName:"a"},"bin_data()"))," method, while the second is implemented by the ",(0,r.kt)("a",{parentName:"p",href:"#scale-data"},(0,r.kt)("strong",{parentName:"a"},"scale_data()"))," method."),(0,r.kt)("h3",{id:"bin-data"},"Bin Data"),(0,r.kt)("p",null,"Let's choose one of the parameter, say 'data.time', divide it into ",(0,r.kt)("inlineCode",{parentName:"p"},"n_bins")," intervals and assign index to each of the interval. Then let's group values of the 'x' vector from the ",(0,r.kt)("a",{parentName:"p",href:"#citrosdata-object"},"previous example")," according to this binning and calculate the mean values of 'x' for the each group. This procedure may be done by function ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.bin_data"},(0,r.kt)("strong",{parentName:"a"},"bin_data()")),". To see the histogram and control number of counts falling in each bin, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"show_fig")," = True:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> db_bin = dataset.bin_data(n_bins = 50,\n                              param_label = 'data.time',\n                              show_fig = True)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the distribution:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"fig4",src:e(14616).Z,title:"Fig4",width:"593",height:"602"}))),(0,r.kt)("p",null,"The result is a ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData"},(0,r.kt)("strong",{parentName:"a"},"CitrosData"))," object too, whose ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"addData")," attributes have two levels of indexes - the new obtained after binning indexes and 'sid'. Mean values of the vector 'x' are stored in 'data' attribute and values of the bin centers are stored in 'addData' attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(db_bin.data)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'data' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null},"sid"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.00000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.08000"),(0,r.kt)("td",{parentName:"tr",align:null},"154.470000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.04460"),(0,r.kt)("td",{parentName:"tr",align:null},"0.06540"),(0,r.kt)("td",{parentName:"tr",align:null},"87.728000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.07900"),(0,r.kt)("td",{parentName:"tr",align:null},"0.00975"),(0,r.kt)("td",{parentName:"tr",align:null},"68.055000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.01600"),(0,r.kt)("td",{parentName:"tr",align:null},"0.07800"),(0,r.kt)("td",{parentName:"tr",align:null},"74.453333")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.01600"),(0,r.kt)("td",{parentName:"tr",align:null},"0.07800"),(0,r.kt)("td",{parentName:"tr",align:null},"65.020000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(db_bin.addData)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'addData' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null},"sid"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"8.458")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"8.458")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"8.458")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"24.774")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"24.774")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("h3",{id:"scale-data"},"Scale Data"),(0,r.kt)("p",null,"Another approach besides from binning is to scale parameter to ","[0,1]"," interval and interpolate data on this new interval with equally spaced points. Data of different 'sid' values processed independently. The function to perform this is ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.scale_data"},(0,r.kt)("strong",{parentName:"a"},"scale_data")),". It's syntax is pretty similar to ",(0,r.kt)("a",{parentName:"p",href:"#bin-data"},(0,r.kt)("strong",{parentName:"a"},"bin_data()")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> db_sc = dataset.scale_data(n_points = 50,\n                               param_label = 'data.time', \n                               show_fig = False)\n")),(0,r.kt)("p",null,"Structure of the output is similar too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(db_sc.data)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'data' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null},"sid"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.080000"),(0,r.kt)("td",{parentName:"tr",align:null},"154.470000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.057000"),(0,r.kt)("td",{parentName:"tr",align:null},"0.056000"),(0,r.kt)("td",{parentName:"tr",align:null},"108.950000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.080000"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.002000"),(0,r.kt)("td",{parentName:"tr",align:null},"17.700000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.025494"),(0,r.kt)("td",{parentName:"tr",align:null},"0.075573"),(0,r.kt)("td",{parentName:"tr",align:null},"6.569425")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.028482"),(0,r.kt)("td",{parentName:"tr",align:null},"0.074719"),(0,r.kt)("td",{parentName:"tr",align:null},"167.725144")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(db_sc.addData)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the content of the 'addData' attribute:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null},"sid"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.020408")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"0.020408")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."))))),(0,r.kt)("p",null,"Similar to the previous ",(0,r.kt)("a",{parentName:"p",href:"#bin-data"},(0,r.kt)("strong",{parentName:"a"},"bin_data()"))," method, if you wish to determine whether to increase or reduce the number of points, set ",(0,r.kt)("inlineCode",{parentName:"p"},"show_fig")," to True. This will display the interpolation results for each component of the vector. Plots are shown for the first five 'sid' values."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the result of the interpolation for 'x_1':"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"fig5",src:e(92215).Z,title:"Fig5",width:"593",height:"602"}))),(0,r.kt)("h2",{id:"statistics"},"Statistics"),(0,r.kt)("h3",{id:"get-statistics"},"Get Statistics"),(0,r.kt)("p",null,"Now, when we bin or scale data over one of the independent parameter and set new indices according to these procedures, we are able to study statistics for each of these indices.\n",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.get_statistics"},(0,r.kt)("strong",{parentName:"a"},"get_statistics()"))," method is dedicated to do it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> stat = db_sc.get_statistics(return_format='citrosStat')\n")),(0,r.kt)("p",null,"It returns ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_stat#analysis.citros_stat.CitrosStat"},(0,r.kt)("strong",{parentName:"a"},"CitrosStat"))," object. Its attributes store independent parameter (stat.x), mean values (stat.mean), covariance matrix (stat.covar_matrix) and standard deviation (stat.sigma, the square root of its diagonal elements) calculated over sids for each index. Each attribute is a ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"},(0,r.kt)("strong",{parentName:"a"},"pandas.DataFrame")),", except for covariance matrix, which is a ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.Series.html"},(0,r.kt)("strong",{parentName:"a"},"pandas.Series")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat.mean)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-4.56666667e-02"),(0,r.kt)("td",{parentName:"tr",align:null},"4.46666667e-02"),(0,r.kt)("td",{parentName:"tr",align:null},"9.37066667e+01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat.x)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.020408")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat.sigma)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_1"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_2"),(0,r.kt)("th",{parentName:"tr",align:null},"data.x.x_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"4.11865674e-02"),(0,r.kt)("td",{parentName:"tr",align:null},"4.21584313e-02"),(0,r.kt)("td",{parentName:"tr",align:null},"6.96475242e+01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")))),(0,r.kt)("p",null,"covariance matrix contains N x N numpy.ndarray, with N being the dimension of the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat.covar_matrix.iloc[0])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"array([[1.69633333e-03, 1.54366667e-03, 2.60583167e+00],\n       [1.54366667e-03, 1.77733333e-03, 2.93335333e+00],\n       [2.60583167e+00, 2.93335333e+00, 4.85077763e+03]])\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.get_statistics"},(0,r.kt)("strong",{parentName:"a"},"get_statistics()"))," method may return statistics as a single ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"},(0,r.kt)("strong",{parentName:"a"},"DataFrame")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> stat = db_sc.get_statistics(return_format='pandas')\n>>> print(stat)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"data.time"),(0,r.kt)("th",{parentName:"tr",align:null},"mean"),(0,r.kt)("th",{parentName:"tr",align:null},"covar_matrix"),(0,r.kt)("th",{parentName:"tr",align:null},"sigma"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data.time_id"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.000000"),(0,r.kt)("td",{parentName:"tr",align:null},"array(","[...]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"array([","[...]","])"),(0,r.kt)("td",{parentName:"tr",align:null},"array(","[...]",")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.020408"),(0,r.kt)("td",{parentName:"tr",align:null},"array(","[...]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"array([","[...]","])"),(0,r.kt)("td",{parentName:"tr",align:null},"array(","[...]",")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")))),(0,r.kt)("p",null,"That way, the type of 'mean', 'covar_matrix' and 'sigma' values in each row are numpy.ndarray:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat['covar_matrix'].iloc[0])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"array([[1.69633333e-03, 1.54366667e-03, 2.60583167e+00],\n       [1.54366667e-03, 1.77733333e-03, 2.93335333e+00],\n       [2.60583167e+00, 2.93335333e+00, 4.85077763e+03]])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat['mean'].iloc[0])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"array[-4.56666667e-02  4.46666667e-02  9.37066667e+01]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(stat['sigma'].iloc[0])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"array([4.11865674e-02, 4.21584313e-02, 6.96475242e+01])\n")),(0,r.kt)("h3",{id:"plot-statistics"},"Plot Statistics"),(0,r.kt)("p",null,"To visualize statistics ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/documentation/analysis/citros_data#analysis.citros_data.CitrosData.show_statistics"},(0,r.kt)("strong",{parentName:"a"},"show_statistics()"))," function is used. It plots values from ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," attribute vs. independent parameter for each of the sid, the mean value over all sids and 3 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03c3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," interval. If 'data' has several components, like in the example above ('x_1', 'x_1', 'x_3'), it makes separate plots for each of the component: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> db_sc.show_statistics()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show the statistics plot:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"fig6",src:e(70369).Z,title:"Fig6",width:"701",height:"602"}))),(0,r.kt)("p",null,"3 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03c3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," standard deviation interval is represented by red lines. To change the number of standard deviations, for example to plot 2 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03c3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," boundary, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"n_std")," = 2. Set parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"std_area")," = True to fill the area the boundary and ",(0,r.kt)("inlineCode",{parentName:"p"},"std_lines")," = False to remove the border lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> db_sc.show_statistics(std_area = True, std_lines = False, n_std = 2)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"fig9",src:e(63707).Z,title:"Fig6",width:"701",height:"602"})),(0,r.kt)("p",null,"To study in details the features at the exact 'data.time' value see about ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.2.61/data_analysis/error_analysis/correlation#correlation"},(0,r.kt)("strong",{parentName:"a"},"show_correlation()"))," method."))}k.isMDXComponent=!0},63707:(t,a,e)=>{e.d(a,{Z:()=>n});const n=e.p+"assets/images/fig27-556f5a9759eeaf10dedf38eae42fa101.png"},14616:(t,a,e)=>{e.d(a,{Z:()=>n});const n=e.p+"assets/images/fig4-3a0912330df338aa9b6d95e63bf8efbc.png"},92215:(t,a,e)=>{e.d(a,{Z:()=>n});const n=e.p+"assets/images/fig5-7f6007fbec3505c9bece0ab6771a7133.png"},70369:(t,a,e)=>{e.d(a,{Z:()=>n});const n=e.p+"assets/images/fig6-cae0ecc792d478d54ad70022ced7ba2c.png"}}]);