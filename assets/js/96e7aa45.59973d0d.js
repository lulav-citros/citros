"use strict";(self.webpackChunkcitros_doc=self.webpackChunkcitros_doc||[]).push([[49730],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var i=n.createContext({}),p=function(t){var e=n.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(i.Provider,{value:e},t.children)},m="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,i=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),m=p(a),u=r,c=m["".concat(i,".").concat(u)]||m[u]||k[u]||l;return a?n.createElement(c,s(s({ref:e},d),{},{components:a})):n.createElement(c,s({ref:e},d))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,s=new Array(l);s[0]=u;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=t,o[m]="string"==typeof t?t:r,s[1]=o;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},29094:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_label:"Class CitrosDB",toc_max_heading_level:3,hide_title:!0,description:"Documentation"},s="Class CitrosDB",o={unversionedId:"data_analysis/documentation/access/citros_db",id:"version-0.2.51/data_analysis/documentation/access/citros_db",title:"Class CitrosDB",description:"Documentation",source:"@site/versioned_docs/version-0.2.51/data_analysis/documentation/access/citros_db.md",sourceDirName:"data_analysis/documentation/access",slug:"/data_analysis/documentation/access/citros_db",permalink:"/docs/0.2.51/data_analysis/documentation/access/citros_db",draft:!1,tags:[],version:"0.2.51",frontMatter:{sidebar_label:"Class CitrosDB",toc_max_heading_level:3,hide_title:!0,description:"Documentation"},sidebar:"gettingStartedSidebar",previous:{title:"Plot Data",permalink:"/docs/0.2.51/data_analysis/data_access/plot_data"},next:{title:"Class CitrosDict",permalink:"/docs/0.2.51/data_analysis/documentation/access/citros_dict"}},i={},p=[{value:"Class <code>CitrosDB</code>",id:"access.citros_db.CitrosDB",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Method <code>get_connection</code>",id:"access.citros_db.CitrosDB.get_connection",level:2},{value:"Returns",id:"returns",level:4},{value:"Method <code>simulation</code>",id:"access.citros_db.CitrosDB.simulation",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Method <code>get_simulation</code>",id:"access.citros_db.CitrosDB.get_simulation",level:2},{value:"Returns",id:"returns-2",level:4},{value:"Method <code>get_simulation_name</code>",id:"access.citros_db.CitrosDB.get_simulation_name",level:2},{value:"Returns",id:"returns-3",level:4},{value:"Method <code>batch</code>",id:"access.citros_db.CitrosDB.batch",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"See Also",id:"see-also",level:4},{value:"Method <code>get_batch_name</code>",id:"access.citros_db.CitrosDB.get_batch_name",level:2},{value:"Returns",id:"returns-5",level:4},{value:"Method <code>get_batch_sizes</code>",id:"access.citros_db.CitrosDB.get_batch_sizes",level:2},{value:"See Also",id:"see-also-1",level:4},{value:"Method <code>topic</code>",id:"access.citros_db.CitrosDB.topic",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"See Also",id:"see-also-2",level:4},{value:"Method <code>sid</code>",id:"access.citros_db.CitrosDB.sid",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"See Also",id:"see-also-3",level:4},{value:"Method <code>rid</code>",id:"access.citros_db.CitrosDB.rid",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-8",level:4},{value:"See Also",id:"see-also-4",level:4},{value:"Method <code>time</code>",id:"access.citros_db.CitrosDB.time",level:2},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-9",level:4},{value:"See Also",id:"see-also-5",level:4},{value:"Method <code>set_filter</code>",id:"access.citros_db.CitrosDB.set_filter",level:2},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-10",level:4},{value:"See Also",id:"see-also-6",level:4},{value:"Method <code>set_order</code>",id:"access.citros_db.CitrosDB.set_order",level:2},{value:"Parameters",id:"parameters-8",level:4},{value:"See Also",id:"see-also-7",level:4},{value:"Method <code>skip</code>",id:"access.citros_db.CitrosDB.skip",level:2},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-11",level:4},{value:"See Also",id:"see-also-8",level:4},{value:"Method <code>avg</code>",id:"access.citros_db.CitrosDB.avg",level:2},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-12",level:4},{value:"See Also",id:"see-also-9",level:4},{value:"Method <code>move_avg</code>",id:"access.citros_db.CitrosDB.move_avg",level:2},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-13",level:4},{value:"See Also",id:"see-also-10",level:4},{value:"Method <code>info</code>",id:"access.citros_db.CitrosDB.info",level:2},{value:"Returns",id:"returns-14",level:4},{value:"Method <code>get_data_structure</code>",id:"access.citros_db.CitrosDB.get_data_structure",level:2},{value:"Parameters",id:"parameters-12",level:4},{value:"See Also",id:"see-also-11",level:4},{value:"Method <code>data</code>",id:"access.citros_db.CitrosDB.data",level:2},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-15",level:4},{value:"See Also",id:"see-also-12",level:4},{value:"Method <code>data_dict</code>",id:"access.citros_db.CitrosDB.data_dict",level:2},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-16",level:4},{value:"See Also",id:"see-also-13",level:4},{value:"Method <code>get_min_value</code>",id:"access.citros_db.CitrosDB.get_min_value",level:2},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Method <code>get_max_value</code>",id:"access.citros_db.CitrosDB.get_max_value",level:2},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Method <code>get_counts</code>",id:"access.citros_db.CitrosDB.get_counts",level:2},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Method <code>get_unique_counts</code>",id:"access.citros_db.CitrosDB.get_unique_counts",level:2},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Method <code>get_unique_values</code>",id:"access.citros_db.CitrosDB.get_unique_values",level:2},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Method <code>time_plot</code>",id:"access.citros_db.CitrosDB.time_plot",level:2},{value:"Parameters",id:"parameters-20",level:4},{value:"Other Parameters",id:"other-parameters",level:4},{value:"See Also",id:"see-also-14",level:4},{value:"Method <code>xy_plot</code>",id:"access.citros_db.CitrosDB.xy_plot",level:2},{value:"Parameters",id:"parameters-21",level:4},{value:"Other Parameters",id:"other-parameters-1",level:4},{value:"See Also",id:"see-also-15",level:4},{value:"Method <code>plot_graph</code>",id:"access.citros_db.CitrosDB.plot_graph",level:2},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Other Parameters",id:"other-parameters-2",level:4},{value:"See Also",id:"see-also-16",level:4},{value:"Method <code>plot_3dgraph</code>",id:"access.citros_db.CitrosDB.plot_3dgraph",level:2},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Other Parameters",id:"other-parameters-3",level:4},{value:"See Also",id:"see-also-17",level:4},{value:"Method <code>multiple_y_plot</code>",id:"access.citros_db.CitrosDB.multiple_y_plot",level:2},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Other Parameters",id:"other-parameters-4",level:4},{value:"See Also",id:"see-also-18",level:4},{value:"Method <code>multiplot</code>",id:"access.citros_db.CitrosDB.multiplot",level:2},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Other Parameters",id:"other-parameters-5",level:4},{value:"See Also",id:"see-also-19",level:4},{value:"Method <code>plot_sigma_ellipse</code>",id:"access.citros_db.CitrosDB.plot_sigma_ellipse",level:2},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"See Also",id:"see-also-20",level:4}],d={toc:p},m="wrapper";function k(t){let{components:e,...l}=t;return(0,r.kt)(m,(0,n.Z)({},d,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-citrosdb"},"Class CitrosDB"),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB"},"Class ",(0,r.kt)("inlineCode",{parentName:"h2"},"CitrosDB")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CitrosDB(\n    simulation=None,\n    batch=None,\n    sid=None,\n    host=None,\n    port=None,\n    database=None,\n    user=None,\n    password=None,\n    debug_connect=False,\n    log=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"CitrosDB object allows to get general information about the batch and make queries."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"simulation"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},'Name of the simulation. Default is ENV variable "CITROS_SIMULATION" if it is set or None if the variable is not defined.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"batch"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")," or ",(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Batch name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"sid"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Simulation run id.",(0,r.kt)("br",null),'    Default is ENV variable "CITROS_SIMULATION_RUN_ID" if it is set or None if the variable is not defined.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"host"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Database host address.",(0,r.kt)("br",null),"    Default is citros.database.CitrosDB.db_host.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"port"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Default is citros.database.CitrosDB.db_port.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"database"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name.",(0,r.kt)("br",null),"    Default is citros.database.CitrosDB.db_name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"user"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"User name.",(0,r.kt)("br",null),"    Default is citros.database.CitrosDB.db_user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"password"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Password.",(0,r.kt)("br",null),"    Default is citros.database.CitrosDB.db_password.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"debug_connect"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("strong",{parentName:"td"},"True"),", the number of connections and queries which were done by all CitrosDB objects with ",(0,r.kt)("strong",{parentName:"td"},"debug_connect")," set ",(0,r.kt)("strong",{parentName:"td"},"True"),(0,r.kt)("br",null),"    existing in the current session is recorded.",(0,r.kt)("br",null),"    The information is recorded to the _stat.Stat() object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"log"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"logging.Logger"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Logger to record log. If None, then the new logger is created."))))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_connection"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_connection")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_connection()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return connection to the PostgreSQL database."),(0,r.kt)("p",null,"Get connection to the database to execute your own queries."),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"connection"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"psycopg2.extensions.connection")," or ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"The connection object for the database, or None if the connection fails."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,'Get connection to the database and query first 5 rows of the batch "batch_1" from the "simulation_cannon_numeric" simulation:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> curs = citros.get_connection().cursor()\n>>> curs.execute('SELECT * FROM \"simulation_cannon_numeric\".\"batch_1\" LIMIT 5')\n>>> D = curs.fetchall()\n>>> print(D)\n[(1, 0, 0, 0, '/config', '.citros/data/... ]\n")),(0,r.kt)("p",null,"The result of the curs.fetchall() is a list, which can easily be converted into a pandas DataFrame if needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import pandas as pd\n>>> df = pd.DataFrame(D)\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.simulation"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"simulation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def simulation(\n    simulation=None,\n    inplace=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set batch to the CitrosDB object."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"simulation"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the simulation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inplace"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, set simulation name to the current CitrosDB object, otherwise returns new CitrosDB",(0,r.kt)("br",null),"    object with set simulation.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set simulation or None, if ",(0,r.kt)("strong",{parentName:"td"},"inplace")," = True."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Show information about the batch 'test' that was created in 'simulation_cannon_analytic' simulation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.simulation('simulation_cannon_analytic').batch('test').info().print()\n{\n 'size': '629 kB',\n 'sid_count': 1,\n 'sid_list': [0],\n 'topic_count': 3,\n 'topic_list': ['/cannon/state', '/config', '/scheduler'],\n 'message_count': 3835\n}\n")),(0,r.kt)("p",null,"Set simulation 'simulation_cannon_analytic' to the already existing ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))," object and Show information about the batch 'test':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB()\n>>> citros.simulation('simulation_cannon_analytic', inplace = True)\n>>> citros.batch('test').info().print()\n{\n 'size': '629 kB',\n 'sid_count': 1,\n 'sid_list': [0],\n 'topic_count': 3,\n 'topic_list': ['/cannon/state', '/config', '/scheduler'],\n 'message_count': 3835\n}\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_simulation"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_simulation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_simulation()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Get information about the current simulation if the simulation is set."),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"simulation"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/0.2.51/data_analysis/documentation/access/citros_dict#access.citros_dict.CitrosDict",title:"access.citros_dict.CitrosDict"},"CitrosDict"))),(0,r.kt)("td",{parentName:"tr",align:null},"Dict with the simulation name."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get the name of the simulation that was set during initialization of CitrosDB object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'simulation_cannon_analytic')\n>>> citros.get_simulation()\n{'name': 'simulation_cannon_analytic'}\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_simulation_name"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_simulation_name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_simulation_name()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Get the simulation name if the simulation is set."),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the simulation. If the simulation is not set, return None."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get the name of the simulation that was set during initialization of CitrosDB object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'simulation_cannon_analytic')\n>>> citros.get_simulation_name()\n'simulation_cannon_analytic'\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.batch"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"batch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def batch(\n    batch=None,\n    inplace=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set batch name to the CitrosDB object."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"batch"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the batch.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inplace"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, set batch name to the current CitrosDB object, otherwise returns new CitrosDB object with",(0,r.kt)("br",null),"    set batch name.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set batch id or None, if ",(0,r.kt)("strong",{parentName:"td"},"inplace")," = True.")))),(0,r.kt)("h4",{id:"see-also"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.simulation",title:"access.citros_db.CitrosDB.simulation"},"CitrosDB.simulation()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data for topic 'A' from the batch 'test' of the simulation 'simulation_cannon_analytic':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('simulation_cannon_analytic').batch('test').topic('A').data()\n")),(0,r.kt)("p",null,"Set batch name 'test' to the already existing ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))," object and query data for simulation simulation 'simulation_cannon_analytic' from the topic 'A':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB()\n>>> citros.batch('test', inplace = True)\n>>> df = citros.simulation('simulation_cannon_analytic').topic('A').data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_batch_name"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_batch_name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_batch_name()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Get the name of the current batch if the batch is set."),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the current batch. If the batch is not set, return None."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get name of the previously set batch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(batch = 'galaxies')\n>>> citros.get_batch_name()\n'galaxies'\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_batch_sizes"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_batch_sizes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_batch_sizes()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return sizes of the batches according to simulation() and batch() settings."),(0,r.kt)("p",null,"Print table with batch names, batch sizes and total batch sizes with indexes."),(0,r.kt)("h4",{id:"see-also-1"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.simulation",title:"access.citros_db.CitrosDB.simulation"},"CitrosDB.simulation()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Display sizes of the all batches:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.get_batch_sizes()\n+-----------+-------------+------------+\n| batch     | size        | total size |\n+-----------+-------------+------------+\n| stars     | 32 kB       | 64 kB      |\n| galaxies  | 8192 bytes  | 16 kB      |\n+-----------+-------------+------------+\n")),(0,r.kt)("p",null,"Display sizes of the batches of the simulation 'simulation_star':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.simulation('simulation_star').get_batch_sizes()\n+--------+-------------+------------+\n| batch  | size        | total size |\n+--------+-------------+------------+\n| stars  | 32 kB       | 64 kB      |\n+--------+-------------+------------+\n")),(0,r.kt)("p",null,'Display size of the batch "galaxies":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'>>> citros.batch("galaxies").get_batch_sizes()\n+-----------+-------------+------------+\n| batch     | size        | total size |\n+-----------+-------------+------------+\n| galaxies  | 8192 bytes  | 16 kB      |\n+-----------+-------------+------------+\n'))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.topic"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"topic")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def topic(\n    topic_name=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Select topic."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"topic_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the topic.")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set 'topic' parameter.")))),(0,r.kt)("h4",{id:"see-also-2"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),"\n:   set sid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),"\n:   set rid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),"\n:   set time constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_filter",title:"access.citros_db.CitrosDB.set_filter"},"CitrosDB.set_filter()")),"\n:   set constraints on query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")),"\n:   set order of the output")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data for topic name 'A' from batch 'dynamics' of the simulation 'engine_system':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('engine_system').batch('dynamics').topic('A').data()\n")),(0,r.kt)("p",null,"Get maximum value of the 'sid' among topics 'A' and 'B':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.simulation('engine_system').batch('dynamics').topic(['A', 'B']).get_max_value('sid')\n3\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.sid"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"sid")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sid(\n    value=None,\n    start=0,\n    end=None,\n    count=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set constraints on sid."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"value"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"ints"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Exact values of sid.",(0,r.kt)("br",null),'    If nothing is passed, then the default value of sid is used (ENV parameter "CITROS_SIMULATION_RUN_ID").',(0,r.kt)("br",null),"    If the default value does not exist, no limits for sid are applied.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"start"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The lower limit for sid values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"end"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"The higher limit for sid, the end is included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"count"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Used only if the ",(0,r.kt)("strong",{parentName:"td"},"end")," is not set.",(0,r.kt)("br",null),"    Number of sid to return in the query, starting form the ",(0,r.kt)("strong",{parentName:"td"},"start"),".")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set 'sid' parameter.")))),(0,r.kt)("h4",{id:"see-also-3"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),"\n:   set topic name to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),"\n:   set rid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),"\n:   set time constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_filter",title:"access.citros_db.CitrosDB.set_filter"},"CitrosDB.set_filter()")),"\n:   set constraints on query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")),"\n:   set order of the output")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data from batch 'robotics' of the simulation 'robot' for topic 'A' where sid values are 1 or 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('robot').batch('robotics').topic('A').sid([1,2]).data()\n")),(0,r.kt)("p",null,"Get data from batch 'robotics' for for topic 'A' where sid is in the range of 3 <= sid <= 8 :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB()\n>>> df = citros.simulation('robot').batch('robotics').topic('A').sid(start = 3, end = 8).data()\n")),(0,r.kt)("p",null,"or the same with ",(0,r.kt)("strong",{parentName:"p"},"count"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('robot').batch('robotics').topic('A').sid(start = 3, count = 6).data()\n")),(0,r.kt)("p",null,"For sid >= 7:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('robot').batch('robotics').topic('A').sid(start = 7).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.rid"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"rid")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def rid(\n    value=None,\n    start=0,\n    end=None,\n    count=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set constraints on rid."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"value"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"ints"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Exact values of rid.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"start"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The lower limit for rid values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"end"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"The higher limit for rid, the end is included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"count"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Used only if the ",(0,r.kt)("strong",{parentName:"td"},"end")," is not set.",(0,r.kt)("br",null),"    Number of rid to return in the query, starting form the ",(0,r.kt)("strong",{parentName:"td"},"start"),".")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set 'rid' parameter.")))),(0,r.kt)("h4",{id:"see-also-4"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),"\n:   set topic name to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),"\n:   set sid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),"\n:   set time constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_filter",title:"access.citros_db.CitrosDB.set_filter"},"CitrosDB.set_filter()")),"\n:   set constraints on query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")),"\n:   set order of the output")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data from the batch 'aero' of the simulation 'plane_test' for topic 'A' where rid values are 10 or 20:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'plane_test')\n>>> df = citros.batch('aero').topic('A').rid([10, 20]).data()\n")),(0,r.kt)("p",null,"Get data from batch 'aero' for topic 'A' where rid is in the range of 0 <= rid <= 9 :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB()\n>>> df = citros.simulation('plane_test').batch('aero').topic('A').rid(start = 0, end = 9).data()\n")),(0,r.kt)("p",null,"or the same with ",(0,r.kt)("strong",{parentName:"p"},"count"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('plane_test').batch('aero').topic('A').rid(start = 0, count = 10).data()\n")),(0,r.kt)("p",null,"For rid >= 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('plane_test').batch('aero').topic('A').rid(start = 5).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.time"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"time")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def time(\n    start=0,\n    end=None,\n    duration=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set constraints on time."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"start"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The lower limit for time values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"end"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"The higher limit for time, the end is included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"duration"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Used only if the ",(0,r.kt)("strong",{parentName:"td"},"end")," is not set.",(0,r.kt)("br",null),"    Time interval to return in the query, starting form the ",(0,r.kt)("strong",{parentName:"td"},"start"),".")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set 'time' parameter.")))),(0,r.kt)("h4",{id:"see-also-5"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),"\n:   set topic name to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),"\n:   set sid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),"\n:   set rid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_filter",title:"access.citros_db.CitrosDB.set_filter"},"CitrosDB.set_filter()")),"\n:   set constraints on query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")),"\n:   set order of the output")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data from the batch 'kinematics' of the simulation 'radar' for topic 'A' where time is in the range 10ns <= time <= 20ns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('radar').batch('kinematics').topic('A').time(start = 10, end = 20).data()\n")),(0,r.kt)("p",null,"To set time range 'first 10ns starting from 10th nanosecond', that means 10ns <= time < 20ns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('radar').batch('kinematics').topic('A').time(start = 10, duration = 10).data()\n")),(0,r.kt)("p",null,"For time >= 20:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.simulation('radar').batch('kinematics').topic('A').time(start = 20).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.set_filter"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"set_filter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def set_filter(\n    filter_by=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set constraints on query."),(0,r.kt)("p",null,"Allows to set constraints on json-data columns before querying."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict")),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()")," and ",(0,r.kt)("strong",{parentName:"td"},"time()")," and will override them.",(0,r.kt)("br",null),"    If one of the sampling method is used (",(0,r.kt)("strong",{parentName:"td"},"skip()"),", ",(0,r.kt)("strong",{parentName:"td"},"avg()")," or ",(0,r.kt)("strong",{parentName:"td"},"move_avg()"),"), constraints on additional columns (rid, sid, time) are applied",(0,r.kt)("br",null),"    BEFORE sampling while constraints on columns from json-data are applied AFTER sampling.")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with set constraints.")))),(0,r.kt)("h4",{id:"see-also-6"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),"\n:   set topic name to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),"\n:   set sid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),"\n:   set rid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),"\n:   set time constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")),"\n:   set order of the output")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"If the structure of the data column in the simulation 'simulation_cannon_analytic' is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{x: {x_1: 11}, note: [13, 34]}\n{x: {x_1: 22}, note: [11, 35]}\n{x: {x_1: 12}, note: [12, 36]}\n...\n")),(0,r.kt)("p",null,"to get data of the batch 'testing' for topic 'A' where values of json-data column 10 < data.x.x_1 <= 20:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'simulation_cannon_analytic')\n>>> citros.batch('testing').topic('A').set_filter({'data.x.x_1': {'>': 10, '<=': 20}}).data()\n     sid  rid  time topic type  data.x.x_1     data.note\n0      0    0  4862     A    a          11      [13, 34]\n1      0    2  7879     A    a          12      [12, 36]\n...\n")),(0,r.kt)("p",null,"get data where the value on the first position in the json-array 'note' equals 11 or 12:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.batch('testing').topic('A').set_filter({'data.note[0]': [11, 12]}).data()\n     sid  rid  time topic type  data.x.x_1     data.note\n0      0    1  4862     A    a          22      [11, 35]\n1      0    2  7879     A    a          12      [12, 36]\n...\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.set_order"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"set_order")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def set_order(\n    order_by=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Apply sorting to the result of the data querying."),(0,r.kt)("p",null,"Sort the result of the query in ascending or descending order."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"order_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str, list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")," or ",(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("strong",{parentName:"td"},"order_by")," is a single string or a list of strings, it represents the column label(s) by which the result is sorted in ascending order.",(0,r.kt)("br",null),"    For more control, use a dictionary with column labels as keys and values ('asc' for ascending, 'desc' for descending) to define the sorting order.")))),(0,r.kt)("h4",{id:"see-also-7"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),"\n:   set topic name to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),"\n:   set sid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),"\n:   set rid values to query"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),"\n:   set time constraints"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_filter",title:"access.citros_db.CitrosDB.set_filter"},"CitrosDB.set_filter()")),"\n:   set constraints on query")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get data from the batch 'aerodynamics' of the simulation 'starship' for topic 'A' and sort the result by sid in ascending order and by rid in descending order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('starship').batch('aerodynamics').topic('A').set_order({'sid': 'asc', 'rid': 'desc'}).data()\n")),(0,r.kt)("p",null,"Sort the result by sid and rid in ascending order:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB(simulation = 'starship')\n>>> df = citros.batch('aerodynamics').topic('A').set_order(['sid', 'rid']).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.skip"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"skip")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def skip(\n    s=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Select each ",(0,r.kt)("strong",{parentName:"p"},"s"),"-th message."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"skip")," is aimed to reduce the number of rows in the query output.\nThis method should be called before querying methods ",(0,r.kt)("strong",{parentName:"p"},"data()")," or ",(0,r.kt)("strong",{parentName:"p"},"data_dict()"),".\nMessages with different sids are selected separately.\nIf any constraints on 'sid', 'rid', 'time', 'topic' and 'type' columns are set, they are applied before sampling, while constraints on data from json column are applied after sampling."),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"s"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Control number of the messages to skip, only every ",(0,r.kt)("strong",{parentName:"td"},"s"),"-th message will be selected.")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with parameters set for sampling method 'skip'.")))),(0,r.kt)("h4",{id:"see-also-8"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data",title:"access.citros_db.CitrosDB.data"},"CitrosDB.data()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data_dict",title:"access.citros_db.CitrosDB.data_dict"},"CitrosDB.data_dict()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get every 3th message of the topic 'A' of the batch 'velocity' of the simulation 'mechanics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'mechanics', batch = 'velocity')\n>>> df = citros.topic('A').skip(3).data()\nthe 1th, the 4th, the 7th ... messages will be selected\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.avg"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"avg")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def avg(\n    n=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set the directive to group and average every set of ",(0,r.kt)("strong",{parentName:"p"},"n")," consecutive messages in the database before querying."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"avg()")," is aimed to reduce number of rows before querying.\nThis method should be called before querying methods ",(0,r.kt)("strong",{parentName:"p"},"data()")," or ",(0,r.kt)("strong",{parentName:"p"},"data_dict()"),".\nMessages with different sids are processed separately.\nWhile averaging, the value in the 'rid' column is determined by taking the minimum 'rid' value from the rows being averaged.\nIf any constraints on 'sid', 'rid', 'time', 'topic' and 'type' columns are set, they are applied before sampling, while constraints on data from json column are applied after sampling."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"n"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of messages to average.")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with parameters set for sampling method 'avg'.")))),(0,r.kt)("h4",{id:"see-also-9"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data",title:"access.citros_db.CitrosDB.data"},"CitrosDB.data()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data_dict",title:"access.citros_db.CitrosDB.data_dict"},"CitrosDB.data_dict()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Average each 3 messages of the topic 'A' from the batch 'velocity' from the simulation 'mechanics' and then query the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('mechanics').batch('velocity').topic('A').avg(3).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.move_avg"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"move_avg")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def move_avg(\n    n=None,\n    s=1\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Set the directive to compute moving average with the window size equals ",(0,r.kt)("strong",{parentName:"p"},"n")," and then during querying select each ",(0,r.kt)("strong",{parentName:"p"},"s"),"-th message of the result."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"move_avg()")," is aimed to smooth data and reduce number of rows in the query output.\nThis method should be called before querying methods ",(0,r.kt)("strong",{parentName:"p"},"data()")," or ",(0,r.kt)("strong",{parentName:"p"},"data_dict()"),".\nMessages with different sids are processed separately.\nWhile averaging, the value in the 'rid' column is determined by taking the minimum 'rid' value from the rows being averaged.\nIf any constraints on 'sid', 'rid', 'time', 'topic' and 'type' columns are set, they are applied before sampling, while constraints on data from json column are applied after sampling."),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"n"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of messages to average.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"s"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},"Control number of the messages to skip, only every ",(0,r.kt)("strong",{parentName:"td"},"s"),"-th message will be selected.")))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB",title:"access.citros_db.CitrosDB"},"CitrosDB"))),(0,r.kt)("td",{parentName:"tr",align:null},"CitrosDB with parameters set for sampling method 'move_avg'.")))),(0,r.kt)("h4",{id:"see-also-10"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data",title:"access.citros_db.CitrosDB.data"},"CitrosDB.data()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data_dict",title:"access.citros_db.CitrosDB.data_dict"},"CitrosDB.data_dict()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"In the batch 'coords' in the simulation 'pendulum' for data in topic 'A' calculate moving average with the window equals 5\nand select every second row of the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('pendulum').batch('coords').topic('A').move_avg(5,2).data()\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.info"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"info")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def info()\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return information about the batch, based on the configurations set by topic(), rid(), sid() and time() methods."),(0,r.kt)("p",null,"The output is a dictionary, that contains:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'size': size of the selected data,\n'sid_count': number of sids,\n'sid_list': list of the sids,\n'topic_count': number of topics,\n'topic_list': list of topics,\n'message_count': number of messages\n")),(0,r.kt)("p",null,"If specific sid is set, also appends dictionary 'sids', with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'sids': {\n  <sid, int>: {\n    'topics': {\n      <topic_name, str>: {\n        'message_count': number of messages,\n        'start_time': time when simulation started,\n        'end_time': time when simulation ended,\n        'duration': duration of the simulation process,\n        'frequency': frequency of the simulation process (in Hz)}}}}\n")),(0,r.kt)("p",null,"If topic is specified, appends dictionary 'topics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'topics': {\n  <topic_name, str>: {\n    'type': type,\n    'data_structure': structure of the data,\n    'message_count': number of messages}}\n")),(0,r.kt)("p",null,'If the topic has multiple types with the same data structure, they are presented in\n\'type\' as a list. If the types have different data structures, they are grouped by\ntheir data structure types and numbered as "type_group_0", "type_group_1", and so on:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'topics': {\n  <topic_name, str>: {\n    \"type_group_0\": {\n      'type': type,\n      'data_structure': structure of the data,\n      'message_count': number of messages},\n    \"type_group_1\": {\n      'type': type,\n      'data_structure': structure of the data,\n      'message_count': number of messages}}}\n")),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/0.2.51/data_analysis/documentation/access/citros_dict#access.citros_dict.CitrosDict",title:"access.citros_dict.CitrosDict"},"CitrosDict"))),(0,r.kt)("td",{parentName:"tr",align:null},"Information about the batch."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Display information about the batch 'dynamics' of the simulation 'mechanics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.simulation('mechanics').batch('dynamics').info().print()\n{\n 'size': '27 kB',\n 'sid_count': 3,\n 'sid_list': [1, 2, 3],\n 'topic_count': 4,\n 'topic_list': ['A', 'B', 'C', 'D'],\n 'message_count': 100\n}\n")),(0,r.kt)("p",null,"Display information about topic 'C' of the batch 'dynamics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.simulation('mechanics').batch('dynamics').topic('C').info().print()\n{\n 'size': '6576 bytes',\n 'sid_count': 3,\n 'sid_list': [1, 2, 3],\n 'topic_count': 1,\n 'topic_list': ['C'],\n 'message_count': 24,\n 'topics': {\n   'C': {\n     'type': 'c',\n     'data_structure': {\n       'data': {\n         'x': {\n           'x_1': 'int',\n           'x_2': 'float',\n           'x_3': 'float'\n         },\n         'note': 'list',\n         'time': 'float',\n         'height': 'float'\n       }\n     },\n     'message_count': 24\n   }\n }\n}\n")),(0,r.kt)("p",null,"Display information about simulation run 1 and 2 of the batch 'dynamics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.simulation('mechanics').batch('dynamics').sid([1,2]).info().print()\n{\n 'size': '20 kB',\n 'sid_count': 2,\n 'sid_list': [1, 2],\n 'topic_count': 4,\n 'topic_list': ['A', 'B', 'C', 'D'],\n 'message_count': 76,\n 'sids': {\n   1: {\n     'topics': {\n       'A': {\n          'message_count': 4,\n          'start_time': 2000000000,\n          'end_time': 17000000000,\n          'duration': 15000000000,\n          'frequency': 0.267\n       },\n       'B': {\n          'message_count': 9,\n...\n          'duration': 150000000,\n          'frequency': 60.0\n       }\n     }\n   }\n }\n}\n")),(0,r.kt)("p",null,"Display information about simulation run 2 of the topic 'C' of the batch 'dynamics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.simulation('mechanics').batch('dynamics').topic('C').sid(2).info().print()\n{\n 'size': '2192 bytes',\n 'sid_count': 1,\n 'sid_list': [2],\n 'topic_count': 1,\n 'topic_list': ['C'],\n 'message_count': 8,\n 'sids': {\n   2: {\n     'topics': {\n       'C': {\n         'message_count': 8,\n         'start_time': 7000000170,\n         'end_time': 19000000800,\n         'duration': 12000000630,\n         'frequency': 0.667\n       }\n     }\n   }\n },\n 'topics': {\n   'C': {\n     'type': 'c',\n     'data_structure': {\n       'data': {\n         'x': {\n           'x_1': 'int',\n           'x_2': 'float',\n           'x_3': 'float'\n         },\n         'note': 'list',\n         'time': 'float',\n         'height': 'float'\n         }\n       },\n     'message_count': 8\n   }\n }\n}\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_data_structure"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_data_structure")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_data_structure(\n    topic=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Display table with topic names, types and corresponding them data structures of the json-data columns for the specific batch."),(0,r.kt)("p",null,"Batch must be set during initialization of CitrosDB object or by ",(0,r.kt)("strong",{parentName:"p"},"batch()")," method."),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"topic"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"List of the topics to show data structure for.",(0,r.kt)("br",null),"    Have higher priority, than those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," methods",(0,r.kt)("br",null),"    and will override them.",(0,r.kt)("br",null),"    If not specified, shows data structure for all topics.")))),(0,r.kt)("h4",{id:"see-also-11"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.simulation",title:"access.citros_db.CitrosDB.simulation"},"CitrosDB.simulation()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Print structure of the json-data column for topics 'A' and 'C' of the batch 'kinematics' of the simulation 'mechanics':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'mechanics')\n>>> citros.batch('kinematics').topic(['A', 'C']).get_data_structure()\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.batch('kinematics').get_data_structure(['A', 'C'])\n+-------+------+-----------------+\n| topic | type | data            |\n+-------+------+-----------------+\n|     A |    a | {               |\n|       |      |   x: {          |\n|       |      |     x_1: float, |\n|       |      |     x_2: float, |\n|       |      |     x_3: float  |\n|       |      |   },            |\n|       |      |   note: list,   |\n|       |      |   time: float,  |\n|       |      |   height: float |\n|       |      | }               |\n+-------+------+-----------------+\n|     C |    c | {               |\n|       |      |   x: {          |\n|       |      |     x_1: float, |\n|       |      |     x_2: float, |\n|       |      |     x_3: float  |\n|       |      |   },            |\n|       |      |   note: list,   |\n|       |      |   time: float,  |\n|       |      |   height: float |\n|       |      | }               |\n+-------+------+-----------------+\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.data"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"data")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def data(\n    data_names=None,\n    additional_columns=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return pandas.DataFrame with data."),(0,r.kt)("p",null,"Query data according to the constraints set by ",(0,r.kt)("strong",{parentName:"p"},"batch()"),", ",(0,r.kt)("strong",{parentName:"p"},"topic()"),", ",(0,r.kt)("strong",{parentName:"p"},"rid()"),", ",(0,r.kt)("strong",{parentName:"p"},"sid()")," and ",(0,r.kt)("strong",{parentName:"p"},"time()")," methods\nand one of the aggregative methods ",(0,r.kt)("strong",{parentName:"p"},"skip()"),", ",(0,r.kt)("strong",{parentName:"p"},"avg()")," or ",(0,r.kt)("strong",{parentName:"p"},"move_avg()"),".\nThe order of the output can be set by ",(0,r.kt)("strong",{parentName:"p"},"set_order()")," method, be default the output is ordered by 'sid' and 'rid' columns."),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"data_names"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns from json data column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"additional_columns"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Columns to download outside the json data column: ",(0,r.kt)("strong",{parentName:"td"},"sid"),", ",(0,r.kt)("strong",{parentName:"td"},"rid"),", ",(0,r.kt)("strong",{parentName:"td"},"time"),", ",(0,r.kt)("strong",{parentName:"td"},"topic"),", ",(0,r.kt)("strong",{parentName:"td"},"type"),".",(0,r.kt)("br",null),"    ",(0,r.kt)("strong",{parentName:"td"},"sid")," column is always queried.",(0,r.kt)("br",null),"    If not specified then all additional columns are queried.")))),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Table with selected data.")))),(0,r.kt)("h4",{id:"see-also-12"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()"),","),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data_dict",title:"access.citros_db.CitrosDB.data_dict"},"CitrosDB.data_dict()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"If the structure of the data column in the batch 'dynamics' in the simulation 'airship' in the topic 'A' is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{x: {x_1: 1}, note: ['a', 'b']}\n{x: {x_1: 2}, note: ['c', 'd']}\n...\n")),(0,r.kt)("p",null,"to get the column with the values of json-object 'x_1'\nand the column with the values from the first position in the json-array 'note':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'airship')\n>>> df = citros.batch('dynamics').topic('A').data([\"data.x.x_1\", \"data.note[0]\"])\n>>> df\n     sid  rid  time topic type  data.x.x_1  data.note[0]\n0      0    0  4862     A    a           1             a\n1      0    1  7749     A    a           2             c\n...\n")),(0,r.kt)("p",null,"Get the whole 'data' column with json-objects divided into separate columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.batch('dynamics').topic('A').data()\n>>> df\n     sid  rid  time topic type  data.x.x_1  data.note\n0      0    0  4862     A    a           1     [a, b]\n1      0    1  7749     A    a           2     [c, d]\n...\n")),(0,r.kt)("p",null,"Get the whole 'data' column as a json-object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = citros.batch('dynamics').topic('A').data([\"data\"])\n>>> df\n     sid  rid  time topic type                             data\n0      0    0  4862     A    a  {x: {x_1: 1}, note: ['a', 'b']}\n1      0    1  7749     A    a  {x: {x_1: 2}, note: ['c', 'd']}\n...\n")),(0,r.kt)("p",null,"Besides the json data column, there are some additional columns: simulation run id (sid), rid, time, topic, and type.\nBy default, all of them are queried. To select only particular ones, use ",(0,r.kt)("strong",{parentName:"p"},"additional_columns")," parameter\n(note that the 'sid' column is always queried):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> dfs = citros.batch('dynamics').topic('A').set_order({'rid': 'asc'}).avg(2)\\\n                .data(['data.x.x_1', 'data.x.x_2'], additional_columns = ['rid', 'topic'])\n>>> dfs[2]\n     sid  rid  topic  data.x.x_1  data.x.x_2\n0      2    0      A         1.5           8\n1      2    2      A           5          10\n...\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.data_dict"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"data_dict")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def data_dict(\n    data_names=None,\n    additional_columns=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return a dict where a dict key is a simulation run id (sid), and a dict value is a pandas.DataFrame related to that sid."),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"data_names"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns from json data column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"additional_columns"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Columns to download outside the json data column: ",(0,r.kt)("strong",{parentName:"td"},"sid"),", ",(0,r.kt)("strong",{parentName:"td"},"rid"),", ",(0,r.kt)("strong",{parentName:"td"},"time"),", ",(0,r.kt)("strong",{parentName:"td"},"topic"),", ",(0,r.kt)("strong",{parentName:"td"},"type"),".",(0,r.kt)("br",null),"    ",(0,r.kt)("strong",{parentName:"td"},"sid")," column is always queried.",(0,r.kt)("br",null),"    If not specified then all additional columns are queried.")))),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict")," of ",(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrames")),(0,r.kt)("td",{parentName:"tr",align:null},"dict with tables, key is a value of sid.")))),(0,r.kt)("h4",{id:"see-also-13"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()"),","),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.data",title:"access.citros_db.CitrosDB.data"},"CitrosDB.data()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Let's suppose that the structure of the data column in the batch 'dynamics' in the simulation 'airship' for simulation run sid = 2 in the topic 'A' is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{x: {x_1: 1, x_2: 3}\n{x: {x_1: 2, x_2: 13}\n{x: {x_1: 4, x_2: 15}\n{x: {x_1: 6, x_2: 5}\n...\n")),(0,r.kt)("p",null,"Download averaged data for each sid separately, return output in ascending order by 'rid':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'airship')\n>>> dfs = citros.batch('dynamics').topic('A').set_order({'rid': 'asc'}).avg(2)\\\n                .data_dict(['data.x.x_1', 'data.x.x_2'])\n")),(0,r.kt)("p",null,"Print sid values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(f'sid values are: {list(dfs.keys())}')\nsid values are: [1, 2, 3, 4]\n")),(0,r.kt)("p",null,"Get table corresponding to the sid = 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> dfs[2]\n     sid  rid  time topic type  data.x.x_1  data.x.x_2\n0      2    0  6305     A    a         1.5           8\n1      2    2  7780     A    a           5          10\n...\n")),(0,r.kt)("p",null,"Besides the json data column, there are some additional columns: simulation run id (sid), rid, time, topic, and type.\nBy default, all of them are queried. To select only particular ones, use ",(0,r.kt)("strong",{parentName:"p"},"additional_columns")," parameter\n(note that the 'sid' column is always queried):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> dfs = citros.batch('dynamics').topic('A').set_order({'rid': 'asc'}).avg(2)\\\n                .data_dict(['data.x.x_1', 'data.x.x_2'], additional_columns = ['rid', 'topic'])\n>>> dfs[2]\n     sid  rid  topic  data.x.x_1  data.x.x_2\n0      2    0      A         1.5           8\n1      2    2      A           5          10\n...\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_min_value"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_min_value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_min_value(\n    column_name,\n    filter_by=None,\n    return_index=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return minimum value of the column ",(0,r.kt)("strong",{parentName:"p"},"column_name"),"."),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"column_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()"),", ",(0,r.kt)("strong",{parentName:"td"},"time()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," and will override them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"return_index"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, the pair of sid and rid corresponding to the obtained minimum value is also returned.",(0,r.kt)("br",null),"    If there are several cases when the maximum or minimum value is reached, the lists of corresponding sids and rids are returned.")))),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"value"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int, float, str")," or ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum value of the column ",(0,r.kt)("strong",{parentName:"td"},"column_name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"sid"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Corresponding to the minimum value's sid. Returns only if ",(0,r.kt)("strong",{parentName:"td"},"return_index")," is set to True.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"rid"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Corresponding to the minimum value's rid. Returns only if ",(0,r.kt)("strong",{parentName:"td"},"return_index")," is set to True."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"For batch 'test_vel' of the simulation 'car_motion' get min value of the column 'data.x.x_2' where topics are 'A' or 'B', 10 <= 'time' <= 5000 and data.x.x_1 > 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation ='car_motion', batch = 'test_vel')\n>>> result = citros.topic(['A', 'B'])\\\n...                .set_filter({'data.x.x_1': {'>=': 10}})\\\n...                .time(start = 10, end = 5000)\\\n...                .get_min_value('data.x.x_2')\n>>> print(result)\n-4.0\n")),(0,r.kt)("p",null,"Get also the sid and rid of the minimum value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> result, sid_min, rid_min = citros.topic(['A', 'B'])\\\n...                            .set_filter({'data.x.x_1': {'>=': 10}})\\\n...                            .time(start = 10, end = 5000)\\\n...                            .get_min_value('data.x.x_2', return_index = True)\n>>> print(f\"min = {result} at sid = {sid_min}, rid = {rid_min}\")\nmin = -4.0 at sid = 4, rid = 44\n")),(0,r.kt)("p",null,"The same as in the first example, but passing all constraints by ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> result = citros.get_min_value('data.x.x_2',\n...                               filter_by = {'topic': ['A', 'B'], \n...                                            'time': {'>=': 10, '<=': 5000}, \n...                                            'data.x.x_1' : {'>':10}})\n>>> print(result)\n-4.0\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_max_value"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_max_value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_max_value(\n    column_name,\n    filter_by=None,\n    return_index=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return maximum value of the column ",(0,r.kt)("strong",{parentName:"p"},"column_name"),"."),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"column_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()"),", ",(0,r.kt)("strong",{parentName:"td"},"time()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," and will override them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"return_index"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, the pair of sid and rid corresponding to the obtained maximum value is also returned.")))),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"value"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int, float, str")," or ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum value of the column ",(0,r.kt)("strong",{parentName:"td"},"column_name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"sid"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Corresponding to the maximum value's sid. Returns only if ",(0,r.kt)("strong",{parentName:"td"},"return_index")," is set to True.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"rid"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Corresponding to the maximum value's rid. Returns only if ",(0,r.kt)("strong",{parentName:"td"},"return_index")," is set to True"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"For batch 'test_vel' of the simulation 'car_motion' get max value of the column 'data.x.x_2' where topics are 'A' or 'B', 10 <= 'time' <= 5000 and data.x.x_1 > 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation ='car_motion', batch = 'test_vel')\n>>> result = citros.topic(['A', 'B'])\\\n...                .set_filter({'data.x.x_1': {'>=': 10}})\\\n...                .time(start = 10, end = 5000)\\\n...                .get_max_value('data.x.x_2')\n>>> print(result)\n76.0\n")),(0,r.kt)("p",null,"Get also the sid and rid of the maximum value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> result, sid_max, rid_max = citros.topic(['A', 'B'])\\\n...                            .set_filter({'data.x.x_1': {'>=': 10}})\\\n...                            .time(start = 10, end = 5000)\\\n...                            .get_max_value('data.x.x_2', return_index = True)\n>>> print(f\"max = {result} at sid = {sid_max}, rid = {rid_max}\")\nmax = 76.0 at sid = 4, rid = 47\n")),(0,r.kt)("p",null,"The same as in the first example, but passing all constraints by ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> result = citros.get_max_value('data.x.x_2',\n...                               filter_by = {'topic': ['A', 'B'], \n...                                            'time': {'>=': 10, '<=': 5000}, \n...                                            'data.x.x_1' : {'>':10}})\n>>> print(result)\n76.0\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_counts"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_counts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_counts(\n    column_name=None,\n    group_by=None,\n    filter_by=None,\n    nan_exclude=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return number of the rows in the column ",(0,r.kt)("strong",{parentName:"p"},"column_name"),"."),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"column_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"group_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns to group by. If blank, do not group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()"),", ",(0,r.kt)("strong",{parentName:"td"},"time()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," and will override them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"nan_exclude"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, nan values are excluded from the count.")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"tuples")," or ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of rows in ",(0,r.kt)("strong",{parentName:"td"},"column_name"),"."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Calculate the total number of rows for batch 'test_vel' of the simulation 'car_engine':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.simulation('car_engine').batch('test_vel').get_counts()\n[(300,)]\n")),(0,r.kt)("p",null,"Calculate the total number of rows in the topic 'A':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB()\n>>> citros.simulation('car_engine').batch('test_vel').topic('A').get_counts()\n[(100,)]\n")),(0,r.kt)("p",null,"If the structure of the data column for the batch 'test_vel' of the simulation 'car_engine' is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{x: {x_1: 52}, note: ['b', 'e']}\n{x: {x_1: 11}, note: ['a', 'c']}\n{x: {x_1: 92}, note: ['b', 'd']}\n...\n")),(0,r.kt)("p",null,"to find the number of values from the first position of the json-array 'note' for topics 'A' or 'B',\nwhere 10 <= 'time' <= 5000 and data.x.x_1 > 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros = CitrosDB(simulation = 'car_engine', batch = 'test_vel')\n>>> citros.topic(['A', 'B'])\\\n...       .set_filter({'data.x.x_1': {'>': 10}})\\\n...       .time(start = 10, end = 5000)\\\n...       .get_counts('data.note[0]')\n[(30,)]\n")),(0,r.kt)("p",null,"To perform under the same conditions, but to get values grouped by topics:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.topic(['A', 'B'])\\\n...       .set_filter({'data.x.x_1': {'>': 10}})\\\n...       .time(start = 10, end = 5000)\\\n...       .get_counts('data.note[0]', group_by = ['topic'])\n[('A', 17), ('B', 13)]\n")),(0,r.kt)("p",null,"The same, but passing all constraints by ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.get_counts('data.note[0]',\n...                    group_by = ['topic'],\n...                    filter_by = {'topic': ['A', 'B'], \n...                                 'time': {'>=': 10, '<=': 5000}, \n...                                 'data.x.x_1' : {'>':10}})\n[('A', 17), ('B', 13)]\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_unique_counts"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_unique_counts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_unique_counts(\n    column_name=None,\n    group_by=None,\n    filter_by=None,\n    nan_exclude=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return number of the unique values in the column ",(0,r.kt)("strong",{parentName:"p"},"column_name"),"."),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"column_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Column to count its unique values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"group_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns to group by. If blank, do not group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()"),", ",(0,r.kt)("strong",{parentName:"td"},"time()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," and will override them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"nan_exclude"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, nan values are excluded from the count.")))),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"tuples")," or ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Counts of the unique values in ",(0,r.kt)("strong",{parentName:"td"},"column_name"),"."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"If the structure of the data column for the batch 'test_vel' of the simulation 'car_engine' is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"{x: {x_1: 52}, note: ['b', 'e']}\n{x: {x_1: 11}, note: ['a', 'c']}\n{x: {x_1: 92}, note: ['b', 'd']}\n...\n")),(0,r.kt)("p",null,"to get the number of unique values from the first position of the json-array 'note' for topics 'A' or 'B',\nwhere 10 <= 'time' <= 5000 and data.x.x_1 > 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'car_engine', batch = 'test_vel')\n>>> citros.topic(['A', 'B'])\\\n...       .set_filter({'data.x.x_1': {'>': 10}})\\\n...       .time(start = 10, end = 5000)\\\n...       .get_unique_counts('data.note[0]')\n[(2,)]\n")),(0,r.kt)("p",null,"To perform under the same conditions, but to get values grouped by topics:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.topic(['A', 'B'])\\\n...       .set_filter({'data.x.x_1': {'>': 10}})\\\n...       .time(start = 10, end = 5000)\\\n...       .get_unique_counts('data.note[0]', group_by = ['topic'])\n[('A', 2), ('B', 2)]\n")),(0,r.kt)("p",null,"The same, but passing all constraints by ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.get_unique_counts('data.note[0]',\n...                           group_by = ['topic'],\n...                           filter_by = {'topic': ['A', 'B'], \n...                                        'time': {'>=': 10, '<=': 5000}, \n...                                        'data.x.x_1' : {'>':10}})\n[('A', 2), ('B', 2)]\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.get_unique_values"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"get_unique_values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_unique_values(\n    column_names,\n    filter_by=None\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Return unique values of the columns ",(0,r.kt)("strong",{parentName:"p"},"column_names"),"."),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"column_names"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Columns for which the unique combinations of the values will be found.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"filter_by"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Constraints to apply on columns: {key_1: value_1, key_2: value_2, ...}, where:",(0,r.kt)("br",null),"      ","\u2022"," key_n - must match labels of the columns,",(0,r.kt)("br",null),"      ","\u2022"," value_n  - in the case of equality: list of exact values,",(0,r.kt)("br",null),'               in the case of inequality: dict with ">", ">=", "<" or "<=".',(0,r.kt)("br",null),"    Conditions, passed here, have higher priority over those defined by ",(0,r.kt)("strong",{parentName:"td"},"topic()"),", ",(0,r.kt)("strong",{parentName:"td"},"rid()"),", ",(0,r.kt)("strong",{parentName:"td"},"sid()"),", ",(0,r.kt)("strong",{parentName:"td"},"time()")," and ",(0,r.kt)("strong",{parentName:"td"},"set_filter()")," and will override them.")))),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"out"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"tuples")),(0,r.kt)("td",{parentName:"tr",align:null},"Each tuple contains unique combinations of the values for ",(0,r.kt)("strong",{parentName:"td"},"column_names"),"."))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Get unique values of type for the batch 'angles' of the simulation 'aircraft' for topics 'A' or 'B', where 10 <= 'time' <= 5000 and data.x.x_1 > 10:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'aircraft', batch = 'angles')\n>>> result = citros.topic(['A', 'B'])\\\n...                .set_filter({'data.x.x_1': {'>': 10}})\\\n...                .time(start = 10, end = 5000)\\\n...                .get_unique_values(['type'])\n>>> print(result)\n['a', 'b']\n")),(0,r.kt)("p",null,"The same, but passing all constraints by ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> result = citros.get_unique_values(['type'], filter_by = {'topic': ['A', 'B'], \n...                                       'time': {'>=': 10, '<=': 5000}, \n...                                       'data.x.x_1': {'>':10}})\n>>> print(result)\n['a', 'b']\n"))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.time_plot"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"time_plot")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def time_plot(\n    ax,\n    *args,\n    topic_name=None,\n    var_name=None,\n    time_step=1.0,\n    sids=None,\n    y_label=None,\n    title_text=None,\n    legend=True,\n    remove_nan=True,\n    inf_vals=1e+308,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Query data and make plot ",(0,r.kt)("strong",{parentName:"p"},"var_name")," vs. ",(0,r.kt)("strong",{parentName:"p"},"Time")," for each of the sids, where ",(0,r.kt)("strong",{parentName:"p"},"Time")," = ",(0,r.kt)("strong",{parentName:"p"},"time_step")," * rid."),(0,r.kt)("p",null,"Both ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time_plot",title:"access.citros_db.CitrosDB.time_plot"},"CitrosDB.time_plot()"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.xy_plot",title:"access.citros_db.CitrosDB.xy_plot"},"CitrosDB.xy_plot()"))," methods are aimed to quickly make plots.\nThey allow you to query data and plot it at once, without need to first save data as a separate DataFrame.\nThe constraints on data may be set by ",(0,r.kt)("strong",{parentName:"p"},"batch()"),", ",(0,r.kt)("strong",{parentName:"p"},"topic()"),", ",(0,r.kt)("strong",{parentName:"p"},"rid()"),", ",(0,r.kt)("strong",{parentName:"p"},"sid()")," and ",(0,r.kt)("strong",{parentName:"p"},"time()")," methods\nand one of the aggregative methods ",(0,r.kt)("strong",{parentName:"p"},"skip()"),", ",(0,r.kt)("strong",{parentName:"p"},"avg()")," or ",(0,r.kt)("strong",{parentName:"p"},"move_avg()"),"."),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Figure axis to plot on.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc, ",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"topic_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Input topic name. If specified, will override value that was set by ",(0,r.kt)("strong",{parentName:"td"},"topic()")," method.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"var_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the variable to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"time_step"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"float")," or ",(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"1.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Time step, ",(0,r.kt)("strong",{parentName:"td"},"Time")," = ",(0,r.kt)("strong",{parentName:"td"},"time_step")," * rid.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"sids"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"List of the sids. If specified, will override values that were set by ",(0,r.kt)("strong",{parentName:"td"},"sid()")," method.",(0,r.kt)("br",null),"    If not specified, data for all sids is used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to y-axis. Default ",(0,r.kt)("strong",{parentName:"td"},"var_name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title_text"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Title of the figure. Default '",(0,r.kt)("strong",{parentName:"td"},"var_y_name")," vs. Time'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")))),(0,r.kt)("h4",{id:"other-parameters"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-14"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.xy_plot",title:"access.citros_db.CitrosDB.xy_plot"},"CitrosDB.xy_plot()"),","),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Import matplotlib and create figure to plot on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots()\n")),(0,r.kt)("p",null,"For batch 'dynamics', simulation 'pendulum' for topic 'A' plot ",(0,r.kt)("strong",{parentName:"p"},"data.x.x_1")," vs. ",(0,r.kt)("strong",{parentName:"p"},"Time")," for all existing sids, ",(0,r.kt)("strong",{parentName:"p"},"Time")," = 0.5 * rid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.simulation('pendulum').batch('dynamics').topic('A').time_plot(ax, var_name = 'data.x.x_1', time_step = 0.5)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"time_plot_1",src:a(49217).Z,title:"time_plot_1",width:"587",height:"455"})),(0,r.kt)("p",null,"Create a new figure and plot only part of the data, where 'data.x.x_1' <= 0; plot by dashed line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = plt.subplots()\n>>> citros.simulation('pendulum').batch('dynamics').topic('A').set_filter({'data.x.x_1':{'<=': 0}})\\\n          .time_plot(ax, '--', var_name = 'data.x.x_1', time_step = 0.5)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"time_plot_2",src:a(76211).Z,title:"time_plot_2",width:"587",height:"455"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.xy_plot"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"xy_plot")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def xy_plot(\n    ax,\n    *args,\n    topic_name=None,\n    var_x_name=None,\n    var_y_name=None,\n    sids=None,\n    x_label=None,\n    y_label=None,\n    title_text=None,\n    legend=True,\n    remove_nan=True,\n    inf_vals=1e+308,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Query data and make plot ",(0,r.kt)("strong",{parentName:"p"},"var_y_name")," vs. ",(0,r.kt)("strong",{parentName:"p"},"var_x_name")," for each of the sids."),(0,r.kt)("p",null,"Both ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time_plot",title:"access.citros_db.CitrosDB.time_plot"},"CitrosDB.time_plot()"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.xy_plot",title:"access.citros_db.CitrosDB.xy_plot"},"CitrosDB.xy_plot()"))," methods are aimed to quickly make plots.\nThey allow you to query data and plot it at once, without need to first save data as a separate DataFrame.\nThe constraints on data may be set by ",(0,r.kt)("strong",{parentName:"p"},"batch()"),", ",(0,r.kt)("strong",{parentName:"p"},"topic()"),", ",(0,r.kt)("strong",{parentName:"p"},"rid()"),", ",(0,r.kt)("strong",{parentName:"p"},"sid()")," and ",(0,r.kt)("strong",{parentName:"p"},"time()")," methods\nand one of the aggregative methods ",(0,r.kt)("strong",{parentName:"p"},"skip()"),", ",(0,r.kt)("strong",{parentName:"p"},"avg()")," or ",(0,r.kt)("strong",{parentName:"p"},"move_avg()"),"."),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Figure axis to plot on.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc, ",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"topic_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Input topic name. If specified, will override value that was set by ",(0,r.kt)("strong",{parentName:"td"},"topic()")," method.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"var_x_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the variable to plot along x-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"var_y_name"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the variable to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"sids"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"int"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"List of the sids. If specified, will override values that were set by ",(0,r.kt)("strong",{parentName:"td"},"sid()")," method.",(0,r.kt)("br",null),"    If not specified, data for all sids is used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to x-axis. Default ",(0,r.kt)("strong",{parentName:"td"},"var_x_name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to y-axis. Default ",(0,r.kt)("strong",{parentName:"td"},"var_y_name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title_text"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Title of the figure. Default '",(0,r.kt)("strong",{parentName:"td"},"var_y_name")," vs. ",(0,r.kt)("strong",{parentName:"td"},"var_x_name"),"'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")))),(0,r.kt)("h4",{id:"other-parameters-1"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-15"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time_plot",title:"access.citros_db.CitrosDB.time_plot"},"CitrosDB.time_plot()"),","),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.batch",title:"access.citros_db.CitrosDB.batch"},"CitrosDB.batch()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.topic",title:"access.citros_db.CitrosDB.topic"},"CitrosDB.topic()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.rid",title:"access.citros_db.CitrosDB.rid"},"CitrosDB.rid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.sid",title:"access.citros_db.CitrosDB.sid"},"CitrosDB.sid()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.time",title:"access.citros_db.CitrosDB.time"},"CitrosDB.time()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.skip",title:"access.citros_db.CitrosDB.skip"},"CitrosDB.skip()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.avg",title:"access.citros_db.CitrosDB.avg"},"CitrosDB.avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.move_avg",title:"access.citros_db.CitrosDB.move_avg"},"CitrosDB.move_avg()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.set_order",title:"access.citros_db.CitrosDB.set_order"},"CitrosDB.set_order()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots()\n")),(0,r.kt)("p",null,"For batch 'dynamics', simulation 'pendulum' for topic 'A' plot 'data.x.x_1' vs. 'data.time' for all existing sids:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> citros.simulation('pendulum').batch('dynamics').topic('A').xy_plot(ax, var_x_name = 'data.x.x_1', var_y_name = 'data.time')\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"xy_plot_1",src:a(43425).Z,title:"xy_plot_1",width:"571",height:"455"})),(0,r.kt)("p",null,"Create new figure and plot only part of the data, where 'data.x.x_1' <= 0, sid = 1 and 2; plot by dashed lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = plt.subplots()\n>>> citros.simulation('pendulum').batch('dynamics').topic('A').set_filter({'data.x.x_1':{'<=': 0}}).sid([1,2])\\\n          .xy_plot(ax, '--', var_x_name = 'data.x.x_1', var_y_name = 'data.time')\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"xy_plot_2",src:a(55015).Z,title:"xy_plot_1",width:"571",height:"455"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.plot_graph"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"plot_graph")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def plot_graph(\n    df,\n    x_label,\n    y_label,\n    *args,\n    ax=None,\n    legend=True,\n    title=None,\n    set_x_label=None,\n    set_y_label=None,\n    remove_nan=True,\n    inf_vals=1e+308,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Plot graph '",(0,r.kt)("strong",{parentName:"p"},"y_label")," vs. ",(0,r.kt)("strong",{parentName:"p"},"x_label"),"' for each sid, where ",(0,r.kt)("strong",{parentName:"p"},"x_label")," and ",(0,r.kt)("strong",{parentName:"p"},"y_label"),"\nare the labels of columns of the pandas.DataFrame ",(0,r.kt)("strong",{parentName:"p"},"df"),"."),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Data table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along x-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc,",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Figure axis to plot on. If not specified, the new pair of fig, ax will be created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Set title of the plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the x-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"x_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the y-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"y_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")))),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure")),(0,r.kt)("td",{parentName:"tr",align:null},"Created figure if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Created axis if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")))),(0,r.kt)("h4",{id:"other-parameters-2"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-16"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_3dgraph",title:"access.citros_db.CitrosDB.plot_3dgraph"},"CitrosDB.plot_3dgraph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiple_y_plot",title:"access.citros_db.CitrosDB.multiple_y_plot"},"CitrosDB.multiple_y_plot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiplot",title:"access.citros_db.CitrosDB.multiplot"},"CitrosDB.multiplot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_sigma_ellipse",title:"access.citros_db.CitrosDB.plot_sigma_ellipse"},"CitrosDB.plot_sigma_ellipse()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Import matplotlib and create figure to plot on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots()\n")),(0,r.kt)("p",null,"Download from batch 'kinematics', simulation 'cube_system' for topic 'A' from json-data column 'data.x.x_1' and 'data.x.x_2' columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('cube_system').batch('kinematics').topic('A').data(['data.x.x_1', 'data.x.x_2'])\n")),(0,r.kt)("p",null,"Plot ",(0,r.kt)("strong",{parentName:"p"},"data.x.x_1")," vs. ",(0,r.kt)("strong",{parentName:"p"},"data.x.x_2"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.plot_graph(df, 'data.x.x_1', 'data.x.x_2', ax = ax, title = 'Example plot')\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"plot_graph_1",src:a(58223).Z,title:"plot_graph_1",width:"579",height:"455"})),(0,r.kt)("p",null,"If ",(0,r.kt)("strong",{parentName:"p"},"ax")," parameter is not passed, ",(0,r.kt)("strong",{parentName:"p"},"plot_graph()")," generates a pair of (matplotlib.figure.Figure, matplotlib.axes.Axes) objects and\nreturns them. Let's plot the previous image without passing ",(0,r.kt)("strong",{parentName:"p"},"ax")," argument, and also let's plot with a dotted line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.plot_graph(df, 'data.x.x_1', 'data.x.x_2', '.', title = 'Example plot')\n>>> fig.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"plot_graph_2",src:a(31609).Z,title:"plot_graph_2",width:"548",height:"547"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.plot_3dgraph"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"plot_3dgraph")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def plot_3dgraph(\n    df,\n    x_label,\n    y_label,\n    z_label,\n    *args,\n    ax=None,\n    scale=True,\n    legend=True,\n    title=None,\n    set_x_label=None,\n    set_y_label=None,\n    set_z_label=None,\n    remove_nan=True,\n    inf_vals=1e+308,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Plot 3D graph '",(0,r.kt)("strong",{parentName:"p"},"z_label")," vs. ",(0,r.kt)("strong",{parentName:"p"},"x_label")," and ",(0,r.kt)("strong",{parentName:"p"},"y_label"),"' for each sid, where ",(0,r.kt)("strong",{parentName:"p"},"x_label"),", ",(0,r.kt)("strong",{parentName:"p"},"y_label")," and ",(0,r.kt)("strong",{parentName:"p"},"z_label"),"\nare the labels of columns of the pandas.DataFrame ",(0,r.kt)("strong",{parentName:"p"},"df"),"."),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Data table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along x-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc,",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Figure axis to plot on. If not specified, the new pair of fig, ax will be created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"scale"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify whether the axis range should be the same for all axes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Set title of the plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the x-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"x_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the y-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"y_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_z_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the z-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"z_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")))),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure")),(0,r.kt)("td",{parentName:"tr",align:null},"Created figure if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Created axis if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")))),(0,r.kt)("h4",{id:"other-parameters-3"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-17"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_graph",title:"access.citros_db.CitrosDB.plot_graph"},"CitrosDB.plot_graph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiple_y_plot",title:"access.citros_db.CitrosDB.multiple_y_plot"},"CitrosDB.multiple_y_plot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiplot",title:"access.citros_db.CitrosDB.multiplot"},"CitrosDB.multiplot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_sigma_ellipse",title:"access.citros_db.CitrosDB.plot_sigma_ellipse"},"CitrosDB.plot_sigma_ellipse()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Import matplotlib and mplot3d for 3D plots and create figure to plot on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import matplotlib.pyplot as plt\n>>> from mpl_toolkits import mplot3d\n>>> fig = plt.figure(figsize=(6, 6))\n>>> ax = fig.add_subplot(111, projection = '3d')\n")),(0,r.kt)("p",null,"For topic 'A' from batch 'testing' of the 'pendulum' simulation from json-data column download 'data.x.x_1', 'data.x.x_2' and 'data.x.x_3' columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('pendulum').batch('testing').topic('A').data(['data.x.x_1', 'data.x.x_2', 'data.x.x_3'])\n")),(0,r.kt)("p",null,"Make 3D plot with dashed lines; ",(0,r.kt)("strong",{parentName:"p"},"scale")," = True aligns all axes to have the same range:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> citros.plot_3dgraph(df, 'data.x.x_1', 'data.x.x_2', 'data.x.x_3', '--', ax = ax, scale = True)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"plot_3dgraph_1",src:a(35243).Z,title:"plot_3dgraph_1",width:"497",height:"485"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.multiple_y_plot"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"multiple_y_plot")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def multiple_y_plot(\n    df,\n    x_label,\n    y_labels,\n    *args,\n    fig=None,\n    legend=True,\n    title=None,\n    set_x_label=None,\n    set_y_label=None,\n    remove_nan=True,\n    inf_vals=1e+308,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Plot a series of vertically arranged graphs 'y vs. ",(0,r.kt)("strong",{parentName:"p"},"x_label"),"', with the y-axis labels\nspecified in the ",(0,r.kt)("strong",{parentName:"p"},"y_labels")," parameter."),(0,r.kt)("p",null,"Different colors correspond to different sids."),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Data table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along x-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_labels"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc,",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"If None, a new Figure will be created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Set title of the plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Label to set to the x-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"x_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str"),", default ",(0,r.kt)("strong",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels to set to the y-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"y_labels"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")))),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure")),(0,r.kt)("td",{parentName:"tr",align:null},"Created figure if ",(0,r.kt)("strong",{parentName:"td"},"fig")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"numpy.ndarray")," of ",(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Created axis if ",(0,r.kt)("strong",{parentName:"td"},"fig")," is not passed.")))),(0,r.kt)("h4",{id:"other-parameters-4"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-18"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_graph",title:"access.citros_db.CitrosDB.plot_graph"},"CitrosDB.plot_graph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_3dgraph",title:"access.citros_db.CitrosDB.plot_3dgraph"},"CitrosDB.plot_3dgraph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiplot",title:"access.citros_db.CitrosDB.multiplot"},"CitrosDB.multiplot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_sigma_ellipse",title:"access.citros_db.CitrosDB.plot_sigma_ellipse"},"CitrosDB.plot_sigma_ellipse()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"For topic 'A' from batch 'testing' of the 'pendulum' simulation from json-data column download 'data.x.x_1', 'data.x.x_2' and 'data.x.x_3' and 'data.time' columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('pendulum').batch('testing').topic('A').data(['data.x.x_1', 'data.x.x_2', 'data.x.x_3', 'data.time'])\n")),(0,r.kt)("p",null,"Plot three subplots with a common x axis: 'data.x.x_1' vs. 'data.time', 'data.x.x_2' vs. 'data.time' and 'data.x.x_3' vs. 'data.time':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.multiple_y_plot(df, 'data.time', ['data.x.x_1', 'data.x.x_2', 'data.x.x_3'])\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"multiple_y_plot_1",src:a(89883).Z,title:"multiple_y_plot_1",width:"670",height:"599"})),(0,r.kt)("p",null,"If ",(0,r.kt)("strong",{parentName:"p"},"ax")," parameter is not passed, ",(0,r.kt)("strong",{parentName:"p"},"multiple_y_plot()")," generates a pair of (matplotlib.figure.Figure, matplotlib.axes.Axes) objects and\nreturns them. Let's make a scatter plot in this manner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.multiple_y_plot(df, 'data.time', ['data.x.x_1', 'data.x.x_2', 'data.x.x_3'], '.')\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"multiple_y_plot_2",src:a(70104).Z,title:"multiple_y_plot_2",width:"670",height:"599"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.multiplot"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"multiplot")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def multiplot(\n    df,\n    labels,\n    *args,\n    scale=True,\n    fig=None,\n    legend=True,\n    title=None,\n    set_x_label=None,\n    set_y_label=None,\n    remove_nan=True,\n    inf_vals=1e+308,\n    label_all_xaxis=False,\n    label_all_yaxis=False,\n    num=5,\n    **kwargs\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Plot a matrix of N x N graphs, each displaying either the histogram with values distribution (for graphs on the diogonal) or\nthe relationship between variables listed in ",(0,r.kt)("strong",{parentName:"p"},"labels"),", with N being the length of ",(0,r.kt)("strong",{parentName:"p"},"labels")," list."),(0,r.kt)("p",null,"For non-diagonal graphs, colors are assigned to points according to sids."),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Data table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"labels"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns to plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"*args"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Any")),(0,r.kt)("td",{parentName:"tr",align:null},"Additional arguments to style lines, set color, etc,",(0,r.kt)("br",null),"    see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"scale"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify whether the axis range should be the same for x and y axes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"If None, a new Figure will be created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend with sids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Set title of the plot.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels to set to the x-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"labels"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels to set to the y-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"labels"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"remove_nan"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, NaN values will be removed before plotting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"label_all_xaxis"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, x labels are set to the x-axes of the all graphs, otherwise only to the graphs in the bottom row.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"label_all_yaxis"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, y labels are set to the y-axes of the all graphs, otherwise only to the graphs in the first column.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"num"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int"),", default ",(0,r.kt)("strong",{parentName:"td"},"5")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of bins in the histogram on the diagonal.")))),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure")),(0,r.kt)("td",{parentName:"tr",align:null},"Created figure if ",(0,r.kt)("strong",{parentName:"td"},"fig")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"numpy.ndarray")," of ",(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Created axis if ",(0,r.kt)("strong",{parentName:"td"},"fig")," is not passed.")))),(0,r.kt)("h4",{id:"other-parameters-5"},"Other Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"kwargs"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Other keyword arguments, see ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html"},"matplotlib.axes.Axes.plot")),".")))),(0,r.kt)("h4",{id:"see-also-19"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_graph",title:"access.citros_db.CitrosDB.plot_graph"},"CitrosDB.plot_graph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_3dgraph",title:"access.citros_db.CitrosDB.plot_3dgraph"},"CitrosDB.plot_3dgraph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiple_y_plot",title:"access.citros_db.CitrosDB.multiple_y_plot"},"CitrosDB.multiple_y_plot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_sigma_ellipse",title:"access.citros_db.CitrosDB.plot_sigma_ellipse"},"CitrosDB.plot_sigma_ellipse()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"For topic 'A' from the batch 'testing_robotics' of the 'robots' simulation from json-data column download 'data.x.x_1', 'data.x.x_2' and 'data.x.x_3':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB()\n>>> df = citros.simulation('robots').batch('testing_robotics').topic('A').data(['data.x.x_1', 'data.x.x_2', 'data.x.x_3'])\n")),(0,r.kt)("p",null,"Plot nine graphs: histograms for three graphs on the diagonal, that represent\ndistribution of the 'data.x.x_1', 'data.x.x_2' and 'data.x.x_3' values, and six graphs that show\ncorrelation between them; plot by dots and scale x and y axes ranges to one interval for each graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.multiplot(df, ['data.x.x_1', 'data.x.x_2', 'data.x.x_3'], '.' , scale = True)\n>>> fig.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"multiplot",src:a(8664).Z,title:"multiplot",width:"670",height:"590"}))),(0,r.kt)("h2",{id:"access.citros_db.CitrosDB.plot_sigma_ellipse"},"Method ",(0,r.kt)("inlineCode",{parentName:"h2"},"plot_sigma_ellipse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def plot_sigma_ellipse(\n    df,\n    x_label,\n    y_label,\n    ax=None,\n    n_std=3,\n    plot_origin=True,\n    bounding_error=False,\n    inf_vals=1e+308,\n    legend=True,\n    title=None,\n    set_x_label=None,\n    set_y_label=None,\n    scale=False,\n    return_ellipse_param=False\n)\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Description"),(0,r.kt)("p",null,"Plot sigma ellipses for the set of data."),(0,r.kt)("h4",{id:"parameters-26"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"pandas.DataFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Data table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Label of the column to plot along x-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"y_labels"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"str")),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the columns to plot along y-axis.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Figure axis to plot on. If not specified, the new pair of fig, ax will be created and returned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"n_std"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"int")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"ints")),(0,r.kt)("td",{parentName:"tr",align:null},"Radius of ellipses in sigmas.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"plot_origin"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, depicts origin (0, 0) with black cross.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"bounding_error"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, plots bounding error circle for each of the ellipses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"inf_vals"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"None")," or ",(0,r.kt)("strong",{parentName:"td"},"float"),", default ",(0,r.kt)("strong",{parentName:"td"},"1e308")),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, all values that exceed the provided value in absolute terms will be removed before plotting.",(0,r.kt)("br",null),"    If this functionality is not required, set inf_vals = None.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"legend"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, show the legend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"title"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Set title. If None, title is set as '",(0,r.kt)("strong",{parentName:"td"},"x_label")," vs. ",(0,r.kt)("strong",{parentName:"td"},"y_label"),"'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_x_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Set label of the x-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"x_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"set_y_label"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"str"),", optional"),(0,r.kt)("td",{parentName:"tr",align:null},"Set label of the y-axis. If None, label is set according to ",(0,r.kt)("strong",{parentName:"td"},"y_label"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"scale"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify whether the axis range should be the same for x and y axes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"return_ellipse_param"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"bool"),", default ",(0,r.kt)("strong",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:null},"If True, returns ellipse parameters.")))),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"fig"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"matplotlib.figure.Figure")),(0,r.kt)("td",{parentName:"tr",align:null},"Created figure if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ax"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"numpy.ndarray")," of ",(0,r.kt)("strong",{parentName:"td"},"matplotlib.axes.Axes")),(0,r.kt)("td",{parentName:"tr",align:null},"Created axis if ",(0,r.kt)("strong",{parentName:"td"},"ax")," is not passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"ellipse_param"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"dict")," or ",(0,r.kt)("strong",{parentName:"td"},"list")," of ",(0,r.kt)("strong",{parentName:"td"},"dict")),(0,r.kt)("td",{parentName:"tr",align:null},"Ellipse parameters if ",(0,r.kt)("strong",{parentName:"td"},"return_ellipse_param")," set True.",(0,r.kt)("br",null),"    Parameters of the ellipse:",(0,r.kt)("br",null),"      ","\u2022"," x : float - x coordinate of the center.",(0,r.kt)("br",null),"      ","\u2022"," y : float - y coordinate of the center.",(0,r.kt)("br",null),"      ","\u2022"," width : float - total ellipse width (diameter along the longer axis).",(0,r.kt)("br",null),"      ","\u2022"," height : float - total ellipse height (diameter along the shorter axis).",(0,r.kt)("br",null),"      ","\u2022"," alpha : float - angle of rotation, in degrees, anti-clockwise from the shorter axis.",(0,r.kt)("br",null),(0,r.kt)("br",null),"    If bounding_error set True:",(0,r.kt)("br",null),"      ","\u2022"," bounding_error : float - radius of the error circle.")))),(0,r.kt)("h4",{id:"see-also-20"},"See Also"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_graph",title:"access.citros_db.CitrosDB.plot_graph"},"CitrosDB.plot_graph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.plot_3dgraph",title:"access.citros_db.CitrosDB.plot_3dgraph"},"CitrosDB.plot_3dgraph()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiple_y_plot",title:"access.citros_db.CitrosDB.multiple_y_plot"},"CitrosDB.multiple_y_plot()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#access.citros_db.CitrosDB.multiplot",title:"access.citros_db.CitrosDB.multiplot"},"CitrosDB.multiplot()")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Let's assume that in topic 'A', the batch named 'aerostatic' of the simulation 'aircraft' includes the columns 'data.x.x_1' and 'data.x.x_2'.\nWe would like to analyze the spread of these values from their mean.\nFirst, we'll query the data and compute new columns 'X1' and 'X2', which will represent the deviations of 'data.x.x_1' and 'data.x.x_2' from their respective mean values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from citros import CitrosDB\n>>> citros = CitrosDB(simulation = 'aircraft')\n>>> df = citros.batch('aerostatic').topic('A').data(['data.x.x_1', 'data.x.x_2'])\n>>> df['X1'] = df['data.x.x_1'] - df['data.x.x_1'].mean()\n>>> df['X2'] = df['data.x.x_2'] - df['data.x.x_2'].mean()\n")),(0,r.kt)("p",null,"Let's plot 'X1' vs. 'X2', 3-",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03c3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," ellipse, origin point that has coordinates (0, 0)\nand set the same range for x and y axis:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.plot_sigma_ellipse(df, x_label = 'X1', y_label = 'X2',\n...                                      n_std = 3, plot_origin=True, scale = True)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"plot_sigma_ellipse_1",src:a(58698).Z,title:"plot_sigma_ellipse_1",width:"701",height:"590"})),(0,r.kt)("p",null,"If we set ",(0,r.kt)("strong",{parentName:"p"},"return_ellipse_param")," = ",(0,r.kt)("strong",{parentName:"p"},"True"),", the parameters of the error ellipse will be returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax, param = citros.plot_sigma_ellipse(df, x_label = 'X1', y_label = 'X2', n_std = 3,\n...                                            plot_origin=True, scale = True, return_ellipse_param = True)\n>>> print(param)\n{'x': 0,\n 'y': 0,\n 'width': 2.1688175559868204,\n 'height': 0.6108213775972502,\n 'alpha': -132.38622331887413}\n")),(0,r.kt)("p",null,"Plot the same but for 1-, 2- and 3-",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"\u03c3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3")))))," ellipses, add bounding error circle (that indicates the maximum distance\nbetween the ellipse points and the origin), set custom labels and title to the plot:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> fig, ax = citros.plot_sigma_ellipse(df, x_label = 'X1', y_label = 'X2',\n...                                     n_std = [1,2,3], plot_origin=True, bounding_error=True,\n...                                     set_x_label='x, [m]', set_y_label = 'y, [m]',\n...                                     title = 'Coordinates')\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"plot_sigma_ellipse_2",src:a(36652).Z,title:"plot_sigma_ellipse_2",width:"701",height:"590"}))))}k.isMDXComponent=!0},89883:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/multiple_y_plot_1-abcbb08676141705bab888a26539cd5d.png"},70104:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/multiple_y_plot_2-11f4ddcefc31e13e018e454440dbdd3a.png"},8664:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/multiplot-879d8d94cda04ad5b289c376867c8769.png"},35243:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/plot_3dgraph_1-ec4d9e55bcea65fc91889062f5169276.png"},58223:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/plot_graph_1-bc4b99a998088fa4cfc5da1cab7623e4.png"},31609:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/plot_graph_2-265559353de1e3b9fca400699393a0cc.png"},58698:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/plot_sigma_ellipse_1-e733d247da49d0f08f854b841e534d82.png"},36652:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/plot_sigma_ellipse_2-1e38737deb8565b418782549f8aa4cbb.png"},49217:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/time_plot_1-135280d567ab2be55bc143f541e83a85.png"},76211:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/time_plot_2-ff3e59feb21f6635cd76821e7a8a427a.png"},43425:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/xy_plot_1-c47c046953c2d8a283eaca18ed914ed2.png"},55015:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/xy_plot_2-ec6d527d46295044b61c6a1013fab047.png"}}]);